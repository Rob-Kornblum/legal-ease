name: Model Performance Check

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  evaluate:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        
    - name: Run evaluation against production server
      run: |
        cd backend
        python enhanced_eval.py
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        API_URL: https://legal-ease-welcome.onrender.com
        
    - name: Check minimum performance
      run: |
        cd backend
        python -c "
        import yaml
        import sys
        import json
        import subprocess
        
        # Run the evaluation and capture results
        try:
            result = subprocess.run(['python', 'enhanced_eval.py'], 
                                  capture_output=True, text=True, check=True)
            output = result.stdout
            
            # Parse accuracy from output
            for line in output.split('\n'):
                if 'Category Accuracy:' in line:
                    parts = line.split(':')[-1].strip()
                    correct, total = parts.split(' ')[0].split('/')
                    accuracy = float(correct) / float(total)
                    break
            else:
                print('Could not parse accuracy from output')
                sys.exit(1)
            
            min_accuracy = 0.90
            print(f'Accuracy: {accuracy:.1%}, Required: {min_accuracy:.1%}')
            
            if accuracy < min_accuracy:
                print(f'❌ Performance below threshold!')
                sys.exit(1)
            else:
                print(f'✅ Performance meets requirements!')
                
        except subprocess.CalledProcessError as e:
            print(f'❌ Evaluation script failed: {e}')
            print(f'stdout: {e.stdout}')
            print(f'stderr: {e.stderr}')
            sys.exit(1)
        "
